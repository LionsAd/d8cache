<?php
/**
 * @file
 * Main module file for the D8 caching system backport.
 */

// @todo Remove once integrated into D7 core.
require_once __DIR__ . '/includes/core.inc';
require_once __DIR__ . '/includes/core-attachments-collector.inc';

require_once __DIR__ . '/includes/block.inc';
require_once __DIR__ . '/includes/comment.inc';
require_once __DIR__ . '/includes/entity.inc';
require_once __DIR__ . '/includes/menu.inc';
require_once __DIR__ . '/includes/node.inc';
require_once __DIR__ . '/includes/theme.inc';
require_once __DIR__ . '/includes/user.inc';

// @todo Remove once integrated into drops-7.
require_once __DIR__ . '/includes/pantheon.inc';

// -----------------------------------------------------------------------
// Core Hooks

/**
 * Implements hook_process_html().
 */
function d8cache_process_html(&$variables) {
  // @todo Find a way to work with ajax.
  drupal_emit_cache_tags();
}

/**
 * Implements hook_emit_cache_tags().
 */
function d8cache_emit_cache_tags($tags) {
  if (variable_get('d8cache_emit_cache_tags', FALSE)) {
    drupal_add_http_header('X-Drupal-Cache-Tags', implode(' ', $tags));
  }
}

/**
 * Implements hook_invalidate_cache_tags().
 */
function d8cache_invalidate_cache_tags($tags) {
 $tag_cache = &drupal_static('d8cache_tag_cache', array());
 $invalidated_tags = &drupal_static('d8cache_invalidated_tags', array());

  foreach ($tags as $tag) {
    // Only invalidate tags once per request unless they are written again.
    if (isset($invalidated_tags[$tag])) {
      continue;
    }

    $invalidated_tags[$tag] = TRUE;
    unset($tag_cache[$tag]);
    db_merge('d8cache_cache_tags')
      ->key(array('tag' => $tag))
      ->fields(array('invalidations' => 1))
      ->expression('invalidations', 'invalidations + 1')
      ->execute();
  }
}

// -----------------------------------------------------------------------
// Contrib Hooks


// -----------------------------------------------------------------------
// Public API

function d8cache_cache_tags_generate_checksum($tags) {
  $tag_cache = &drupal_static('d8cache_tag_cache', array());
  $checksum = 0;

  $query_tags = array_diff($tags, array_keys($tag_cache));
  if ($query_tags) {
    if ($db_tags = db_query('SELECT tag, invalidations FROM {d8cache_cache_tags} WHERE tag IN (:tags)', array(':tags' => $query_tags))->fetchAllKeyed()) {
      $tag_cache += $db_tags;
    }

    // Fill static cache with empty objects for tags not found in the database.
    $tag_cache += array_fill_keys(array_diff($query_tags, array_keys($db_tags)), 0);
  }

  foreach ($tags as $tag) {
    $checksum += $tag_cache[$tag];
  }

  return $checksum;
}

// -----------------------------------------------------------------------
// Helper functions
